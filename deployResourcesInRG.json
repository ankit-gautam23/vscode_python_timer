    // Deploy Resources in Resource Group in ConsumptionPlan
    {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "_generator": {
            "name": "bicep",
            "version": "0.10.61.36676",
            "templateHash": "2440974564149075183"
        }
    },
    "parameters": {
        "LM_COMPANY": {
            "type": "string",
            "metadata": {
                "description": "The LogicMonitor account name. If your domain is mycompany.logicmonitor.com, then it is mycompany"
            }
        },
        "LM_ACCESS_ID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "LogicMonitor API Token access ID."
            }
        },
        "LM_ACCESS_KEY": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "LogicMonitor API Token access Key."
            }
        },
        "LM_BEARER_TOKEN": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "LM API Bearer Token.\nEither specify access_id and access_key both or bearer_token. If all specified, LMv1 token(access_id and access_key) will be used for authentication with LogicMonitor."
            }
        },

        "INCLUDE_METADATA_KEYS": {
            "type": "string",
            "defaultValue": "severity,actor.displayName,actor.type,actor.alternateId,client.geographicalContext.city,displayMessage,eventType,target",
            "metadata": {
                "description": "comma separated keys to add as event metadata in a lm-log event. for nested json specify '.' eg - actor.displayname,actor.type"
            }
        },
        "OKTA_API_KEY": {
            "type": "string",
            "metadata": {
                "description": "Okta API key to fetch logs from okta."
            }
        },
        "OKTA_DOMAIN": {
            "type": "string",
            "metadata": {
                "description": "okta domain eg 'company.okta.com'."
            }
        },
        "LM_SERVICE_NAME_KEY": {
            "type": "string",
            "defaultValue": "okta-system-logs",
            "metadata": {
                "description": "This will be used for anomaly detection."
            }
        },
        "LM_RESOURCE_ID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Ignored when LMLogsServiceName is specified. Is a json for resource mapping. if specified as {\"system.hostname\" : \"prod-node-us-west-1\"} all logs will be mapped against the device with property system.hostname = prod-node-us-west-1"
            }
        }
    },
    "variables": {
        "storage": "[toLower(uniqueString(resourceGroup().id))]",
        "applicationInsightsName": "applicationInsightsName-zip",
        "KEY_VAULT": "[if(greater(length(parameters('LM_COMPANY')) , 12), substring(parameters('LM_COMPANY'), sub(length(parameters('LM_COMPANY')) , 12), 12) ,parameters('LM_COMPANY'))]",
        "storageAccountName": "[if(greater(length(variables('storage')) , 24), substring(variables('storage'), sub(length(variables('storage')) , 24), 24) , variables('storage'))]",
        "keyVaultSecretOktaKey": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'oktakey')]",
        "serverFarmName": "[concat('lm-okta','-',parameters('LM_COMPANY'))]",
        "keyVaultSecretLMAccessKey": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmkey')]",
        "keyVaultSecretLMAccessId": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmid')]",
        "keyVaultSecretLMBearerToken": "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmbearer')]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2020-08-01-preview",
            "name": "[variables('storageAccountName')]",
            "kind": "Storage",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "minimumTlsVersion": "TLS1_2"
            },
            "resources": [
                {
                    "type": "blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat('default/', 'oktalinkcontainer')]",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-02-01",
            "location": "[resourceGroup().location]",
            "name": "[variables('serverFarmName')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y"
            },
            "properties": {
                "computeMode": "Dynamic",
                "reserved": true
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
            },
            "properties": {
                "Application_Type": "web"
            },
            "kind": "web"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2022-03-01",
            "name": "[variables('serverFarmName')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "reserved": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
                "siteConfig": {
                    "linuxFxVersion": "python|3.11"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2019-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/', variables('KEY_VAULT'))]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'oktakey')]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmid')]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmkey')]",
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KEY_VAULT'), 'lmbearer')]",
                        "[resourceId('Microsoft.Web/sites', variables('serverFarmName'))]",
                        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
                    ],
                    "properties": {
                        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]",
                        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]",
                        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                        "WEBSITE_CONTENTSHARE": "[toLower(variables('serverFarmName'))]",
                        "FUNCTIONS_WORKER_RUNTIME": "python",
                        "SCM_DO_BUILD_DURING_DEPLOYMENT": "true",
                        "FUNCTIONS_EXTENSION_VERSION": "~4",
                        "COMPANY_NAME": "[parameters('LM_COMPANY')]",
                        "LM_ACCESS_ID": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('keyVaultSecretLMAccessId'), '2015-06-01').secretUriWithVersion, ')')]",
                        "LM_ACCESS_KEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('keyVaultSecretLMAccessKey'), '2015-06-01').secretUriWithVersion, ')')]",
                        "LM_BEARER_TOKEN": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('keyVaultSecretLMBearerToken'), '2015-06-01').secretUriWithVersion, ')')]",
                        "APPLICATION_NAME": "lm-logs-okta",
                        "INCLUDE_METADATA_KEYS": "[parameters('INCLUDE_METADATA_KEYS')]",
                        "LOG_LEVEL": "WARNING",
                        "OKTA_API_KEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(variables('keyVaultSecretOktaKey'), '2015-06-01').secretUriWithVersion, ')')]",
                        "OKTA_DOMAIN": "[parameters('OKTA_DOMAIN')]",
                        "LM_SERVICE_NAME_KEY": "[parameters('LM_SERVICE_NAME_KEY')]",
                        "LM_RESOURCE_ID": "[parameters('LM_RESOURCE_ID')]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites/extensions",
            "apiVersion": "2022-03-01",
            "name": "[format('{0}/{1}', variables('serverFarmName'), 'zipdeploy')]",
            "properties": {
                "packageUri": "https://github.com/choudharypooja/vscode_python_timer/raw/main/LMOktaLogsForwarder.zip"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('serverFarmName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KEY_VAULT'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('KEY_VAULT')]",
            "apiVersion": "2023-07-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabledForDeployment": true,
                "tenantId": "[subscription().tenantId]",
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": false,
                "sku": {
                    "name": "standard",
                    "family": "A"
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites/', variables('serverFarmName')), '2020-12-01', 'Full').identity.principalId]",
                        "permissions": {
                            "keys": [
                                "get",
                                "list"
                            ],
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('serverFarmName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('serverFarmName'))]"
            ],
            "resources": [
                {
                    "type": "Microsoft.KeyVault/vaults/secrets",
                    "name": "[concat(variables('KEY_VAULT'), '/', 'oktakey')]",
                    "apiVersion": "2022-07-01",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('KEY_VAULT'))]"
                    ],
                    "properties": {
                        "value": "[parameters('OKTA_API_KEY')]"
                    }
                },
                {
                    "type": "Microsoft.KeyVault/vaults/secrets",
                    "name": "[concat(variables('KEY_VAULT'), '/', 'lmkey')]",
                    "apiVersion": "2022-07-01",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('KEY_VAULT'))]"
                    ],
                    "properties": {
                        "value": "[parameters('LM_ACCESS_KEY')]"
                    }
                },
                {
                    "type": "Microsoft.KeyVault/vaults/secrets",
                    "name": "[concat(variables('KEY_VAULT'), '/', 'lmid')]",
                    "apiVersion": "2022-07-01",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('KEY_VAULT'))]"
                    ],
                    "properties": {
                        "value": "[parameters('LM_ACCESS_ID')]"
                    }
                },
                {
                    "type": "Microsoft.KeyVault/vaults/secrets",
                    "name": "[concat(variables('KEY_VAULT'), '/', 'lmbearer')]",
                    "apiVersion": "2022-07-01",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('KEY_VAULT'))]"
                    ],
                    "properties": {
                        "value": "[parameters('LM_BEARER_TOKEN')]"
                    }
                }
            ]
        }
    ]
}
